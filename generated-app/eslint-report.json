[{"filePath":"F:\\Intern-Task\\generated-app\\src\\App.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[16,26],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useState' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useState"},"fix":{"range":[25,35],"text":""},"desc":"Remove unused variable 'useState'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Completed from \"./pages/Completed\";\nimport About from \"./pages/About\";\nimport './App.css'\n\nfunction App() {\n\n\n  return (\n    <Router>\n      <div className=\"min-h-screen flex flex-col bg-gray-50 dark:bg-gray-900\">\n        <Header />\n        <main className=\"flex-1\">\n          <Routes>\n            <Route path=\"/\" element={<Dashboard />} />\n            <Route path=\"/completed\" element={<Completed />} />\n            <Route path=\"/about\" element={<About />} />\n          </Routes>\n        </main>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App\n","usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\__tests__\\App.test.jsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":5,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":6,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":8,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":9,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":12,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":15,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":11}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\r\nimport { render, screen } from '@testing-library/react';\r\nimport App from '../App';\r\n\r\ndescribe('App', () => {\r\n  test('renders header and footer', () => {\r\n    render(<App />);\r\n    expect(screen.getByRole('link', { name: /About/i })).toBeInTheDocument();\r\n    expect(screen.getByRole('link', { name: /Dashboard/i })).toBeInTheDocument();\r\n  });\r\n\r\n  test('renders about page on route \"/about\"', () => {\r\n    window.history.pushState({}, '', '/about');\r\n    render(<App />);\r\n    expect(screen.getByRole('heading', { name: /About/i })).toBeInTheDocument();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\components\\AddTodo.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\components\\Footer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\components\\Header.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\components\\TodoItem.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\components\\TodoList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\pages\\About.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\pages\\Completed.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\pages\\Dashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":114,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":17},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":114,"column":19,"nodeType":"BlockStatement","messageId":"unexpected","endLine":114,"endColumn":21,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4095,4095],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { Plus, Clock, CheckCircle, Circle, User, Calendar, Flag, Loader2, AlertCircle } from \"lucide-react\";\r\n\r\nconst Dashboard = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [newTask, setNewTask] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    priority: \"medium\",\r\n    assignee: \"\",\r\n    dueDate: \"\",\r\n    tags: \"\"\r\n  });\r\n  const [showAddForm, setShowAddForm] = useState(false);\r\n\r\n  const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n  const kanbanColumns = [\r\n    { id: \"todo\", label: \"To Do\", color: \"#f8fafc\", borderColor: \"#e2e8f0\", icon: Circle, count: tasks.filter(t => t.status === \"todo\").length },\r\n    { id: \"inprogress\", label: \"In Progress\", color: \"#fef3c7\", borderColor: \"#fbbf24\", icon: Clock, count: tasks.filter(t => t.status === \"inprogress\").length },\r\n    { id: \"completed\", label: \"Completed\", color: \"#d1fae5\", borderColor: \"#10b981\", icon: CheckCircle, count: tasks.filter(t => t.status === \"completed\").length }\r\n  ];\r\n\r\n  // Fetch tasks from backend\r\n  const fetchTasks = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await fetch(`${API_BASE_URL}/todos`, {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n      const data = await response.json();\r\n      setTasks(data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Create new task\r\n  const createTask = async (taskData) => {\r\n    try {\r\n      setSubmitting(true);\r\n      const response = await fetch(`${API_BASE_URL}/todos`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(taskData)\r\n      });\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n      const newTask = await response.json();\r\n      setTasks(prev => [newTask, ...prev]);\r\n      return newTask;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Update task status (PATCH)\r\n  const updateTaskStatus = async (taskId, newStatus) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/todos/${taskId}`, {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ status: newStatus })\r\n      });\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n      const updatedTask = await response.json();\r\n      setTasks(prev => prev.map(task => task._id === taskId ? { ...task, ...updatedTask } : task));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Delete task\r\n  const deleteTaskFromDB = async (taskId) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/todos/${taskId}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n      setTasks(prev => prev.filter(task => task._id !== taskId));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => { fetchTasks(); }, []);\r\n\r\n  const addTask = async () => {\r\n    if (!newTask.title.trim()) return;\r\n    try {\r\n      const taskData = {\r\n        title: newTask.title,\r\n        description: newTask.description,\r\n        status: \"todo\",\r\n        priority: newTask.priority,\r\n        assignee: newTask.assignee || null,\r\n        dueDate: newTask.dueDate || null,\r\n        tags: newTask.tags.split(\",\").map(tag => tag.trim()).filter(tag => tag)\r\n      };\r\n      await createTask(taskData);\r\n      setNewTask({ title: \"\", description: \"\", priority: \"medium\", assignee: \"\", dueDate: \"\", tags: \"\" });\r\n      setShowAddForm(false);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const moveTask = (taskId, newStatus) => { updateTaskStatus(taskId, newStatus); };\r\n  const deleteTask = (taskId) => { deleteTaskFromDB(taskId); };\r\n  const getPriorityColor = (priority) => {\r\n    switch(priority) {\r\n      case \"high\": return \"#ef4444\";\r\n      case \"medium\": return \"#f59e0b\";\r\n      case \"low\": return \"#10b981\";\r\n      default: return \"#6b7280\";\r\n    }\r\n  };\r\n\r\n  const TaskCard = ({ task }) => (\r\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-3 hover:shadow-md transition-shadow\">\r\n      <div className=\"flex items-start justify-between mb-2\">\r\n        <h3 className=\"font-semibold text-gray-900 text-sm\">{task.title}</h3>\r\n        <div className=\"flex items-center gap-1\">\r\n          <Flag size={12} color={getPriorityColor(task.priority)} fill={getPriorityColor(task.priority)} />\r\n          <button onClick={() => deleteTask(task._id)} className=\"text-gray-400 hover:text-red-500 text-xs\">×</button>\r\n        </div>\r\n      </div>\r\n      <p className=\"text-gray-600 text-xs mb-3 line-clamp-2\">{task.description}</p>\r\n      <div className=\"flex flex-wrap gap-1 mb-3\">\r\n        {(task.tags || []).map((tag, idx) => (\r\n          <span key={idx} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded\">{tag}</span>\r\n        ))}\r\n      </div>\r\n      <div className=\"flex items-center justify-between text-xs text-gray-500\">\r\n        <div className=\"flex items-center gap-1\">\r\n          <User size={12} />\r\n          <span>{task.assignee || \"Unassigned\"}</span>\r\n        </div>\r\n        {task.dueDate && (\r\n          <div className=\"flex items-center gap-1\">\r\n            <Calendar size={12} />\r\n            <span>{new Date(task.dueDate).toLocaleDateString()}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"flex gap-1 mt-3\">\r\n        {task.status !== \"todo\" && (\r\n          <button onClick={() => moveTask(task._id, \"todo\")} className=\"px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded hover:bg-gray-200\">To Do</button>\r\n        )}\r\n        {task.status !== \"inprogress\" && (\r\n          <button onClick={() => moveTask(task._id, \"inprogress\")} className=\"px-2 py-1 bg-yellow-100 text-yellow-700 text-xs rounded hover:bg-yellow-200\">In Progress</button>\r\n        )}\r\n        {task.status !== \"completed\" && (\r\n          <button onClick={() => moveTask(task._id, \"completed\")} className=\"px-2 py-1 bg-green-100 text-green-700 text-xs rounded hover:bg-green-200\">Complete</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <Loader2 className=\"animate-spin h-12 w-12 text-blue-600 mx-auto mb-4\" />\r\n          <p className=\"text-gray-600\">Loading tasks...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\r\n        <div className=\"text-center bg-white p-8 rounded-lg shadow-lg\">\r\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\r\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Connection Error</h2>\r\n          <p className=\"text-gray-600 mb-4\">{error}</p>\r\n          <button onClick={fetchTasks} className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\">Retry</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\r\n      <div className=\"p-6 max-w-7xl mx-auto\">\r\n        <div className=\"flex items-center justify-between mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Task Dashboard</h1>\r\n          <button onClick={() => setShowAddForm(true)} className=\"flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\" disabled={submitting}>\r\n            <Plus size={20} />\r\n            Add Task\r\n          </button>\r\n        </div>\r\n        {showAddForm && (\r\n          <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-black/30 backdrop-blur-sm\">\r\n            <div className=\"bg-white/90 rounded-2xl shadow-2xl p-8 w-full max-w-md border border-gray-200\">\r\n              <h2 className=\"text-xl font-semibold mb-4 text-center\">Add New Task</h2>\r\n              <div className=\"space-y-4\">\r\n                <input type=\"text\" placeholder=\"Task Title\" value={newTask.title} onChange={e => setNewTask({ ...newTask, title: e.target.value })} className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/80\" />\r\n                <textarea placeholder=\"Description\" value={newTask.description} onChange={e => setNewTask({ ...newTask, description: e.target.value })} className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/80\" rows=\"3\" />\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <select value={newTask.priority} onChange={e => setNewTask({ ...newTask, priority: e.target.value })} className=\"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/80\">\r\n                    <option value=\"low\">Low Priority</option>\r\n                    <option value=\"medium\">Medium Priority</option>\r\n                    <option value=\"high\">High Priority</option>\r\n                  </select>\r\n                  <input type=\"date\" value={newTask.dueDate} onChange={e => setNewTask({ ...newTask, dueDate: e.target.value })} className=\"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/80\" />\r\n                </div>\r\n                <input type=\"text\" placeholder=\"Assignee\" value={newTask.assignee} onChange={e => setNewTask({ ...newTask, assignee: e.target.value })} className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/80\" />\r\n                <input type=\"text\" placeholder=\"Tags (comma separated)\" value={newTask.tags} onChange={e => setNewTask({ ...newTask, tags: e.target.value })} className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/80\" />\r\n              </div>\r\n              <div className=\"flex gap-3 mt-6\">\r\n                <button onClick={addTask} disabled={submitting} className=\"flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\">\r\n                  {submitting ? 'Adding...' : 'Add Task'}\r\n                </button>\r\n                <button onClick={() => setShowAddForm(false)} disabled={submitting} className=\"flex-1 bg-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-400 transition-colors disabled:opacity-50\">\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"flex gap-6 overflow-x-auto pb-4\">\r\n          {kanbanColumns.map(column => {\r\n            const Icon = column.icon;\r\n            const columnTasks = tasks.filter(task => task.status === column.id);\r\n            return (\r\n              <div key={column.id} className=\"flex-shrink-0 w-80 bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\r\n                <div className=\"flex items-center justify-between mb-4\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Icon size={20} color={column.borderColor} />\r\n                    <h2 className=\"font-semibold text-gray-900\">{column.label}</h2>\r\n                    <span className=\"bg-gray-100 text-gray-600 px-2 py-1 rounded-full text-sm\">{column.count}</span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"min-h-96 max-h-96 overflow-y-auto\">\r\n                  {columnTasks.map(task => (\r\n                    <TaskCard key={task._id} task={task} />\r\n                  ))}\r\n                  {columnTasks.length === 0 && (\r\n                    <div className=\"text-center py-8 text-gray-500\">\r\n                      <div className=\"text-4xl mb-2\">📋</div>\r\n                      <p>No tasks yet</p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\pages\\Home.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"F:\\Intern-Task\\generated-app\\src\\pages\\Login.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":22,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    if (!email || !password) {\r\n      setError(\"Email and password are required\");\r\n      return;\r\n    }\r\n    try {\r\n      const res = await axios.post(\"http://localhost:5000/api/auth/login\", { email, password });\r\n      localStorage.setItem(\"token\", res.data.token);\r\n      navigate(\"/home\");\r\n    } catch (err) {\r\n      setError(\"Invalid credentials\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n      <div className=\"w-full max-w-md p-8 bg-white dark:bg-gray-800 rounded shadow-md\">\r\n        <h2 className=\"text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white\">Sign in to your account</h2>\r\n        <form onSubmit={handleSubmit} className=\"flex flex-col gap-4\">\r\n          <input\r\n            type=\"email\"\r\n            className=\"px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            className=\"px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          {error && <div className=\"text-red-500 text-sm text-center\">{error}</div>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full py-2 bg-blue-600 text-white rounded hover:bg-blue-700 font-semibold\"\r\n          >\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","usedDeprecatedRules":[]}]